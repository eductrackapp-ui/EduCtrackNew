rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --------------------
    // TEACHERS COLLECTION - Critical for teacher portal
    // --------------------
    match /teachers/{teacherId} {
      // Teachers can read/update their own profile
      allow read, update: if request.auth != null && request.auth.uid == teacherId;
      // Admins can read/write all teacher profiles
      allow read, write: if request.auth != null && request.auth.token.role == 'admin';
      // Allow creation during registration
      allow create: if request.auth != null && 
                    (request.auth.uid == teacherId || request.auth.token.role == 'admin');
    }

    // --------------------
    // LESSONS COLLECTION - For teacher portal
    // --------------------
    match /lessons/{lessonId} {
      // Teachers can manage their own lessons
      allow read, write: if request.auth != null && 
                         (request.auth.token.role == 'teacher' || 
                          request.auth.token.role == 'admin');
      // Parents can read lessons
      allow read: if request.auth != null && request.auth.token.role == 'parent';
    }

    // --------------------
    // USERS COLLECTION
    // --------------------
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // --------------------
    // PERFORMANCES COLLECTION
    // --------------------
    match /performances/{docId} {
      allow read: if request.auth != null && request.auth.token.role == 'parent';
      allow read, create: if request.auth != null && request.auth.token.role == 'teacher';
      allow read, write: if request.auth != null && request.auth.token.role == 'admin';
    }

    // --------------------
    // STUDENTS COLLECTION
    // --------------------
    match /students/{studentId} {
      allow read: if request.auth != null && request.auth.token.role == 'parent';
      allow read, create: if request.auth != null && request.auth.token.role == 'teacher';
      allow read, write: if request.auth != null && request.auth.token.role == 'admin';
    }

    // --------------------
    // NOTIFICATIONS COLLECTION
    // --------------------
    match /notifications/{notifId} {
      allow read: if request.auth != null && request.auth.token.role == 'parent';
      allow read, create: if request.auth != null && request.auth.token.role == 'teacher';
      allow read, write: if request.auth != null && request.auth.token.role == 'admin';
    }

    // --------------------
    // OTP COLLECTION
    // --------------------
    match /otps/{otpId} {
      // Tout utilisateur connecté peut lire son propre OTP
      allow read: if request.auth != null 
                  && request.auth.token.email == resource.data.email;

      // Admin peut créer un OTP
      allow create: if request.auth != null 
                    && request.auth.token.role == 'admin'
                    && isValidOTPData(request.resource.data);

      // Admin peut mettre à jour ou supprimer un OTP
      allow update, delete: if request.auth != null 
                            && request.auth.token.role == 'admin';
    }

    // --------------------
    // RATE LIMITS COLLECTION
    // --------------------
    match /rate_limits/{email} {
      allow create, update: if request.auth != null 
                            && request.auth.token.role == 'admin'
                            && isValidRateLimitData(request.resource.data);
      allow read, delete: if request.auth != null && request.auth.token.role == 'admin';
    }

    // --------------------
    // ADMINS COLLECTION
    // --------------------
    match /admins/{document=**} {
      allow read, write: if request.auth != null && request.auth.token.role == 'admin';
    }

    // --------------------
    // FALLBACK RULE - Allow authenticated users for other collections
    // --------------------
    match /{document=**} {
      allow read, write: if request.auth != null;
    }

    // --------------------
    // HELPER FUNCTIONS
    // --------------------
    function isValidOTPData(data) {
      return data.keys().hasAll(['code', 'timestamp', 'used', 'email', 'expiresAt', 'userId']) &&
             data.code is string &&
             data.code.matches('\\d{6}') &&
             data.timestamp is number &&
             data.used is bool &&
             data.email is string &&
             data.expiresAt is number &&
             data.expiresAt > data.timestamp &&
             (data.expiresAt - data.timestamp) <= 300000 &&
             data.userId is string;
    }

    function isValidRateLimitData(data) {
      return data.keys().hasAll(['email', 'lastRequest', 'attempts']) &&
             data.email is string &&
             data.lastRequest is number &&
             data.attempts is number &&
             data.attempts >= 0 &&
             data.attempts <= 10;
    }
  }
}
